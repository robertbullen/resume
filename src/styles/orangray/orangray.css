@import url('https://fonts.googleapis.com/css2?family=Source+Sans+Pro:ital,wght@0,200;0,300;0,400;1,300&display=block');

:root {
	--color-background: white;
	--color-accent-1: #ff8800;
	--color-accent-2: #444444;
	--color-low-contrast: #888888;
	--color-high-contrast: #444444;

	/* --color-background: #333333;
	--color-accent: #5777c0;
	--color-low-contrast: #999999;
	--color-high-contrast: #dddddd; */

	/* Font family name variations are used instead of font weights due to a limitation of
	CanvasRenderingContext2D.measureText(). */
	--font-family-light: 'Source Sans Pro ExtraLight', sans-serif;
	--font-family-normal: 'Source Sans Pro Light', sans-serif;
	--font-family-bold: 'Source Sans Pro Regular', sans-serif;

	--font-size-larger: 112.5%;
	--font-size-smaller: 87.5%;

	--hexgrid-rotation: 15deg;
}

body {
	background-color: var(--color-background);
	color: var(--color-high-contrast);
	font-family: var(--font-family-normal);
	font-size: 18px;
}

h1 {
	--measure-text-compensation-factor: 0.97;
	color: var(--color-accent-1);
	font-family: var(--font-family-light);
	font-size: 400%;
	letter-spacing: -0.045em;
	line-height: 100%;
	margin: -0.09em;
	max-height: 128px;
	text-transform: uppercase;
}

h2 {
	font-size: 133%;
	font-family: var(--font-family-light);
	text-transform: uppercase;
	white-space: nowrap;
}

#candidate .heading,
#mission .heading {
	display: none;
}

.candidate-contact-service-component {
	color: var(--color-high-contrast);
}

.candidate-contact-service-component a:hover {
	text-decoration: underline;
}

.candidate-contact-service-component a > * {
	vertical-align: middle;
}

.candidate-contact-service-component a > i {
	color: var(--color-low-contrast);
	margin-right: 0.25rem;
}

.candidate-contact-service-component a > span {
	font-size: var(--font-size-smaller);
}

.mission-component p {
	font-size: var(--font-size-larger);
	text-align: justify;
}

/* Make all hexagons slightly transparent. */
.interests-hexgrid-component g.hexagons {
	opacity: 0.85;
}

/* Fill the hexagons according to the cluster they inhabit. */
.interests-hexgrid-component g.hexagons g.cluster:nth-of-type(1) {
	fill: var(--color-accent-1);
}
.interests-hexgrid-component g.hexagons g.cluster:nth-of-type(2) {
	fill: var(--color-accent-2);
}

/* Give a default style to all labels. */
.interests-hexgrid-component g.labels {
	color: var(--color-background);
	fill: var(--color-background);
	line-height: 112.5%;
	text-transform: lowercase;
}

/* Style cluster-name hexagons and their labels distinctly. */
.interests-hexgrid-component g.hexagons g.hexagon.cluster-name path:nth-of-type(2) {
	fill: var(--color-background);
}
.interests-hexgrid-component g.labels g.cluster:nth-of-type(1) g.label.cluster-name {
	color: var(--color-accent-1);
	fill: var(--color-accent-1);
	text-transform: uppercase;
}
.interests-hexgrid-component g.labels g.cluster:nth-of-type(2) g.label.cluster-name {
	color: var(--color-accent-2);
	fill: var(--color-accent-2);
	text-transform: uppercase;
}

/* Apply some transformations for added visual interest:
   - rotate the whole diagram 15 degrees, and then compensate the labels so they remain horizontal
   - separate the two clusters a little bit
*/
.interests-hexgrid-component g.root {
	transform: rotate(var(--hexgrid-rotation)) scale(0.98) translate(0.25rem, 0.75rem);
	transform-origin: center;
}
.interests-hexgrid-component g.hexagon {
	transform-origin: center;
	transform-box: fill-box;
}
.interests-hexgrid-component g.label {
	transform: rotate(calc(var(--hexgrid-rotation) * -1));
	transform-origin: center;
	transform-box: fill-box;
}
.interests-hexgrid-component g.cluster:nth-of-type(1) {
	transform: translate(-0.5rem, 0);
}
.interests-hexgrid-component g.cluster:nth-of-type(2) {
	transform: translate(0.5rem, 0);
}

/* Animate in. */
.interests-hexgrid-component g.hexagon,
.interests-hexgrid-component g.label {
	animation-delay: calc(var(--animation-offset) * 1.5s);
	animation-duration: 2s;
	animation-fill-mode: both;
}
.interests-hexgrid-component g.hexagon {
	animation-name: animate-in-hexagon;
}
.interests-hexgrid-component g.label {
	animation-name: animate-in-label;
}
@keyframes animate-in-hexagon {
	0% {
		opacity: 0.25;
		transform: scale(0);
	}

	33% {
		transform: scale(1.125) translateX(-0.5rem);
	}

	67% {
		opacity: 1;
		transform: scale(0.875) translateX(0.5rem);
	}

	100% {
		transform: scale(1);
	}
}

@keyframes animate-in-label {
	0% {
		transform: rotate(calc(var(--hexgrid-rotation) * -1)) scale(0);
	}

	33% {
		transform: rotate(calc(var(--hexgrid-rotation) * -1)) scale(1.125) translateX(-0.5rem);
	}

	67% {
		transform: rotate(calc(var(--hexgrid-rotation) * -1)) scale(0.875) translateX(0.5rem);
	}

	100% {
		transform: rotate(calc(var(--hexgrid-rotation) * -1)) scale(1);
	}
}

.skill-ratings-chart-component {
	font-size: var(--font-size-smaller);
	line-height: 133%;
}

section:nth-child(odd) .skill-ratings-chart-component g.bars rect {
	fill: var(--color-accent-2);
}
section:nth-child(even) .skill-ratings-chart-component g.bars rect {
	fill: var(--color-accent-1);
}

.skill-ratings-chart-component g.x-grid {
	opacity: 0.5;
}

.skill-ratings-chart-component g.x-grid polyline {
	stroke: var(--color-low-contrast);
}

.skill-ratings-chart-component g.x-labels {
	fill: var(--color-low-contrast);
	font-style: italic;
}

.skill-ratings-chart-component g.y-labels {
	fill: var(--color-high-contrast);
}

section#experience {
	height: 100%;
}

.experience-timeline-component {
	height: 100%;
}

.experience-timeline-component g.year-grid {
	opacity: 0.1;
}

.experience-timeline-component g.year-grid rect.dark {
	fill: var(--color-low-contrast);
}

.experience-timeline-component g.year-grid rect.light {
	fill: none;
}

.experience-timeline-component g.year-labels {
	fill: var(--color-low-contrast);
	font-size: var(--font-size-smaller);
}
